@page "/"
@namespace Blazor.Test.Grid.Server.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Server Side Blazor</title>
    <base href="~/" />
    <environment include="Development">
        <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    </environment>
    <environment exclude="Development">
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
              asp-fallback-href="css/bootstrap/bootstrap.min.css"
              asp-fallback-test-class="sr-only" asp-fallback-test-property="position" asp-fallback-test-value="absolute"
              crossorigin="anonymous"
              integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" />
    </environment>
    <link href="css/site.css" rel="stylesheet" />
</head>
<body>
    <app>
        <component type="typeof(Blazor.Test.Grid.Core.Components.App)" render-mode="Server" />
    </app>

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script autostart="false" src="_framework/blazor.server.js"></script>
    <script>
        async function connectionDown(options) {
            console.log("Connection Down - you could do some UI here...");
            for (let i = 0; i < options.maxRetries; i++) {
                console.log("Waiting for reconnect attempt #"+(i+1)+" ...");
                await this.delay(options.retryIntervalMilliseconds);
                if (this.isDisposed) {
                    break;
                }

                try {
                    // reconnectCallback will asynchronously return:
                    // - true to mean success
                    // - false to mean we reached the server, but it rejected the connection (e.g., unknown circuit ID)
                    // - exception to mean we didn't reach the server (this can be sync or async)
                    console.log("Starting Reconnect attempt #"+(i+1)+" ...");
                    const result = await window.Blazor.reconnect();
                    if (!result) {
                        // If the server responded and refused to reconnect, log it 
                        console.error("Server Rejected");
                    } else {
                        // Reconnected!
                        return;
                    }
                } catch (err) {
                    // We got an exception so will try again 
                    console.error(err);
                }
            }
            // all attempts failed - let's try a full reload
            // This could be a UI change instead or something more complicated
            location.reload();
        }

        function delay(durationMilliseconds) {
            return new Promise(resolve => setTimeout(resolve, durationMilliseconds));
        }

        function connectionUp(e) {
            // Reconnected
            console.log("Connection UP!");
            // if you have a UI to hide/change you can do that here.
        }

        window.Blazor.start({
            reconnectionOptions: {
                maxRetries: 30,
                retryIntervalMilliseconds: 500,
            },
            reconnectionHandler: {
                onConnectionDown: e => connectionDown(e),
                onConnectionUp: e => connectionUp(e)
            }
        });
    </script>
</body>
</html>
